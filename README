Ocaml bloomfilter module.
Functions: create, insert, test
Types: bloomFilterT, Either
"create" returns an either type (left error string, right bloomFilterT). Use fmapEither to modify the bloom filter

-------- Testing
-- Create
let bF = BloomFilter.create 100 0.1;;
  Right {n = 100; p = 0.1; k = 3; m = 479; bf = <abstr>}

-- Test element not in filter
fmapEither (fun bf -> BloomFilter.test bf "hey") bF;;
  (string, bool) either = Right false

-- Test element added to filter
fmapEither (fun bf -> BloomFilter.insert bf "hey") bF;;
fmapEither (fun bf -> BloomFilter.test bf "hey") bF;;
  (string, bool) either = Right true

-- Test number of bits set
fmapEither (fun bf -> BitSet.count bf.BloomFilter.bf ) bF;;
  (string, int) either = Right 3

-------- Equations
m = filter bin count
n = elements
k = hash count
p = false positive probability
 * Prob bit is not set
   (1 - (1/m)) ^ (kn)
 * Prob of false positive
   p = (1 - e ^ (-kn/m)) ^ k

-- Optimal hash assumption
 * Optimal hash count
   k = m / n * (ln 2)
 * Length of bloom filter given optimal hash count
   m = - (n * ln p) / (ln 2) ^ 2
 * Items in bloom filter
   n* = - (m * ln (1 - X/m)) / k
 
input params:
 * nc = expected number of elements to hold
 * p  = probability of false positive
 * file = file name to restore filter

Implementation should not depend on specific type of input values.
Prioritize robustness and maintainability

Length of bloom filter given optimal hash count
m = - (n * ln p) / (ln 2) ^ 2
Optimal hash count
k = m / n * (ln 2)

